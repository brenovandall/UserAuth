using AutoMapper;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Server.IIS.Core;
using UserAuth.Data.Dtos;
using UserAuth.Models;
using UserAuth.Services;

namespace UserAuth.Controllers;

[ApiController]
[Route("[controller]")]
public class UserController : ControllerBase
{
    private UserService _userService;

    // UserService is responsable to sign and log the user for access authentication -- >
    public UserController(UserService userService)
    {
        _userService = userService;
    }

    // tasks represent asynchronous operations, enabling concurrent execution without blocking the main thread
    [HttpPost("sign")] 
    public async Task<IActionResult> UserCreating(UserDto user)
    {
        await _userService.Sign(user); // wait for service request 
        return Ok("User successfully signed"); // can return ok because its on the controller, so if system gets off the service,
                                               // it can return ok to the client
    }

    [HttpPost("login")] 
    public async Task<IActionResult> LoginAsync(UserLoginDto logindto)
    {
        //var webToken = await _userService.Login(logindto); // wait for service request 
        //return Ok(webToken); // can return ok because its on the controller, so if system gets off the service, it can
        //return ok and token message

        try
        {
            var webToken = await _userService.Login(logindto);
            return Ok(new { Status = "Success", Token = webToken }); 
            // the web token is generated by random bytes that was created, its in secrets rn, but i made a random key
            // generator for information security, but IM NOT USING THAT IN THIS CASE!
            // if want to see more, please visit the KeyGenerator class
        }
        catch (Exception ex)
        {
            return BadRequest(new { Status = "Error", Message = $"Login failed: {ex.Message}" });
        }

    }
}